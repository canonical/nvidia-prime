#!/usr/bin/python3
#
#       prime-select
#
#       Copyright 2013 Canonical Ltd.
#       Author: Alberto Milone <alberto.milone@canonical.com>
#
#       Script to switch between NVIDIA and Intel graphics driver libraries.
#
#       Usage:
#           prime-select   nvidia|integrated/intel|on-demand|query
#           nvidia:    switches to NVIDIA's version of libGL.so
#           on-demand: load NVIDIA driver, and on-demend for others
#           integrated (intel for backward compatibility): switches to the open-source version of libGL.so
#           query: checks which version is currently active and writes
#                  "nvidia", "integrated", "on-demand" or "unknown" to the
#                  standard output
#
#       Permission is hereby granted, free of charge, to any person
#       obtaining a copy of this software and associated documentation
#       files (the "Software"), to deal in the Software without
#       restriction, including without limitation the rights to use,
#       copy, modify, merge, publish, distribute, sublicense, and/or sell
#       copies of the Software, and to permit persons to whom the
#       Software is furnished to do so, subject to the following
#       conditions:
#
#       The above copyright notice and this permission notice shall be
#       included in all copies or substantial portions of the Software.
#
#       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#       EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#       OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#       NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#       HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#       WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#       FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#       OTHER DEALINGS IN THE SOFTWARE.

import glob
import os
import sys
import re
import subprocess
import shutil
import itertools
import time

from copy import deepcopy
from subprocess import Popen, PIPE, CalledProcessError


class Switcher(object):

    def __init__(self):
        self._power_profile_path = '/etc/prime-discrete'
        self._old_blacklist_file = '/etc/modprobe.d/blacklist-nvidia.conf'
        self._blacklist_file = '/lib/modprobe.d/blacklist-nvidia.conf'
        self._nvidia_kms_file = '/lib/modprobe.d/nvidia-kms.conf'
        self._nvidia_runtimepm_file = '/lib/modprobe.d/nvidia-runtimepm.conf'

    def _get_profile(self):

        try:
            with open(self._power_profile_path, 'r') as settings:
                return settings.read().strip()
        except:
            return 'unknown'

    def print_profile(self):
        profile = self._get_profile()
        if profile == 'unknown':
            return False

        print('%s' % profile)
        return True

    def _write_profile(self, profile):
        # Write the settings to the file
        with open(self._power_profile_path, 'w') as settings:
            settings.write('%s\n' % profile)

    def _is_laptop(self):
        # Chassis types:
        #
        # 01 Other
        # 02 Unknown
        # 03 Desktop
        # 04 Low Profile Desktop
        # 05 Pizza Box
        # 06 Mini Tower
        # 07 Tower
        # 08 Portable
        # 09 Laptop
        # 10 Notebook
        # 11 Hand Held
        # 12 Docking Station
        # 13 All In One
        # 14 Sub Notebook
        # 15 Space-saving
        # 16 Lunch Box
        # 17 Main Server Chassis
        # 18 Expansion Chassis
        # 19 Sub Chassis
        # 20 Bus Expansion Chassis
        # 21 Peripheral Chassis
        # 22 RAID Chassis
        # 23 Rack Mount Chassis
        # 24 Sealed-case PC
        # 25 Multi-system
        # 26 CompactPCI
        # 27 AdvancedTCA
        # 28 Blade
        # 29 Blade Enclosing
        # 30 Tablet
        # 31 Convertible
        # 32 Detachable
        # 33 IoT Gateway
        # 34 Embedded PC
        # 35 Mini PC
        # 36 Stick PC
        path = '/sys/devices/virtual/dmi/id/chassis_type'

        if os.path.isfile(path):
            with open(path, 'r') as f:
                chassis_type = f.read()
            if chassis_type:
                chassis_type = int(chassis_type.strip())
            else:
                return False
            return chassis_type in (8, 9, 10, 31)


    def _get_bootvga_card(self):
        bootvga = ''
        cards = glob.glob('/sys/class/drm/card[0-9]')
        for card in cards:
            bootvga_path = os.path.join(card, 'device/boot_vga')
            try:
                with open(bootvga_path, 'r') as f:
                    t = f.read()
                if t:
                    if int(t.strip()) > 0:
                        bootvga = card
                        break
            except:
                pass
        return bootvga
    
    def _is_known_int_card_vendor(self, vendor):
        known_vendors = [
            '8086', #Intel
            '1002', #AMD
            ]
        return next((True for x in known_vendors if vendor.lower().find(x) > -1), False)

    def _get_card_vendor(self, card):
        vendor_path = os.path.join(card, 'device/vendor')
        with open(vendor_path, 'r') as f:
            t = f.read()
        return t.strip()

    def _has_integrated_gpu(self):
        path = '/var/lib/ubuntu-drivers-common/last_gfx_boot'
        if os.path.isfile(path):
            with open(path, 'r') as f:
                t = f.read()
                if self._is_known_int_card_vendor(t):
                    return True
        else:
            card = self._get_bootvga_card()
            if card:
                vendor = self._get_card_vendor(card)
                if self._is_known_int_card_vendor(t):
                    return True

        return False

    def _supports_runtimepm(self):
        return os.path.isfile('/run/nvidia_runtimepm_supported')

    def _is_runtimepm_enabled(self):
        return os.path.isfile('/run/nvidia_runtimepm_enabled')

    def _enable_runtimepm(self):
        print('Writing %s' % self._nvidia_runtimepm_file)
        with open(self._nvidia_runtimepm_file, 'w') as pm_fd:
            pm_fd.write('options nvidia \"NVreg_DynamicPowerManagement=0x02\"\n')

    def _disable_runtimepm(self):
        try:
            print('Deleting %s' % self._nvidia_runtimepm_file)
            os.unlink(self._nvidia_runtimepm_file)
        except:
            pass

    def enable_profile(self, profile):
        if not self._has_integrated_gpu():
            sys.stderr.write('Error: no integrated GPU detected.\n')
            return False

        sys.stdout.write('Info: selecting the %s profile\n' % (profile))

        if profile == 'nvidia':
            # Always allow enabling nvidia
            # (No need to check if nvidia is available)
            self._enable_nvidia()
        elif profile == "on-demand":
            # Enable RTD3 only on laptops
            if self._is_laptop():
                if self._supports_runtimepm():
                    self._enable_runtimepm()
            self._enable_kms()
            self._disable_nvidia(keep_nvidia_modules=True)
        else: # integrated card only
            self._remove_kms()
            self._disable_nvidia(keep_nvidia_modules=False)

        # Write the settings to the config file
        self._write_profile(profile)

        return True

    def _disable_nvidia(self, keep_nvidia_modules):
        try:
            os.unlink(self._old_blacklist_file)
        except:
            pass

        if keep_nvidia_modules:
            try:
                os.unlink(self._blacklist_file)
            except:
                pass
        else:
            self._blacklist_nvidia()

        # Update the initramfs
        self._update_initramfs()

    def _enable_nvidia(self):
        try:
            os.unlink(self._old_blacklist_file)
        except:
            pass

        self._disable_runtimepm()

        try:
            os.unlink(self._blacklist_file)
        except:
            pass
        self._enable_kms()

        # Update the initramfs
        self._update_initramfs()

    def _blacklist_nvidia(self):
        blacklist_text = '''# Do not modify
# This file was generated by nvidia-prime
blacklist nvidia
blacklist nvidia-drm
blacklist nvidia-modeset
alias nvidia off
alias nvidia-drm off
alias nvidia-modeset off
'''
        with open(self._blacklist_file, 'w') as blacklist_fd:
            blacklist_fd.write(blacklist_text)

    def _write_kms_settings(self, value):
        # This is actually disabled now, but it can be enabled
        # by users with a simple change.
        kms_text = '''# This file was generated by nvidia-prime
# Set value to 1 to enable modesetting
options nvidia-drm modeset=%d
''' % (value)
        with open(self._nvidia_kms_file, 'w') as kms_fd:
            kms_fd.write(kms_text)

    def _enable_kms(self):
        # Create configuration file so that users can enable
        # KMS easily.
        # modeset is off by default.
        # TODO: maybe should get rid of KMS settings at all, since will be handled by nvidia driver
        if not os.path.isfile(self._nvidia_kms_file):
            self._write_kms_settings(1)
        
    def _remove_kms(self):
        print('Deleting %s' % self._nvidia_kms_file)
        try:
            os.unlink(self._nvidia_kms_file)
        except:
            pass

    def _update_initramfs(self):
        # Create spinner to give feed back on the
        # operation
        spinner = itertools.cycle ( ['-', '/', '|', '\\'])
        proc = subprocess.Popen(['update-initramfs', '-u'],stdout=subprocess.PIPE)
        print('Updating the initramfs. Please wait for the operation to complete:')

        # Check if process is still running
        while proc.poll()==None:
            try:
                # Print the spinner
                sys.stdout.write(spinner.__next__())
                sys.stdout.flush()
                sys.stdout.write('\b')
                time.sleep(0.2)
            except BrokenPipeError:
                return False

        print('Done')

        # Print out the output
        output=proc.communicate()[0]

def check_root():
    if not os.geteuid() == 0:
        sys.stderr.write("This operation requires root privileges\n")
        exit(1)

def handle_query_error():
    sys.stderr.write("Error: no profile can be found\n")
    exit(1)

def usage():
    sys.stderr.write("Usage: %s nvidia|integrated/intel|on-demand|query\n" % (sys.argv[0]))

if __name__ == '__main__':
    try:
        arg = sys.argv[1]
    except IndexError:
        arg = None

    if len(sys.argv[1:]) != 1:
        usage()
        exit(1)

    switcher = Switcher()

    if arg in ['integrated', 'intel', 'nvidia', 'on-demand']:
        check_root()
        if arg == 'intel':
            arg = 'integrated'
        switcher.enable_profile(arg)
    elif arg == 'query':
        if not switcher.print_profile():
            handle_query_error()
    else:
        usage()
        sys.exit(1)

    exit(0)
